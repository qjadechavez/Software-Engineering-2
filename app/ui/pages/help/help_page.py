from PyQt5 import QtWidgets, QtCore, QtGui
from app.ui.pages.base_page import BasePage

class HelpPage(BasePage):
    def __init__(self, parent=None, user_info=None):
        super(HelpPage, self).__init__(parent, title="Help & Documentation", user_info=user_info)
    
    def createContent(self):
        # Content area
        self.content_area = QtWidgets.QWidget()
        self.content_layout = QtWidgets.QVBoxLayout(self.content_area)
        self.content_layout.setContentsMargins(10, 10, 10, 10)
        self.content_layout.setSpacing(15)
        
        # Create tabs for different functionalities
        self.create_tabs()
        
        # Add the content area to the page layout
        self.layout.addWidget(self.content_area)
    
    def create_tabs(self):
        """Create tabs for different system functionalities"""
        self.tabs = QtWidgets.QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane { 
                border: 1px solid #444; 
                background-color: #232323;
                border-radius: 5px;
            }
            QTabBar::tab {
                background-color: #343434;
                color: #ffffff;
                padding: 10px 20px;
                border-top-left-radius: 6px;
                border-top-right-radius: 6px;
                font-weight: bold;
                min-width: 100px;
                font-size: 12px;
            }
            QTabBar::tab:selected {
                background-color: #1a1a1a;
                border-bottom-color: #1a1a1a;
            }
            QTabBar::tab:hover:!selected {
                background-color: #3a3a3a;
            }
        """)
        
        # Create tabs for each navigation page
        self.create_user_manual_tab()  # Add this first
        self.create_dashboard_tab()
        self.create_invoice_tab()
        self.create_inventory_tab()
        self.create_customer_tab()
        self.create_suppliers_tab()
        self.create_reports_tab()
        self.create_maintenance_tab()
        
        self.content_layout.addWidget(self.tabs)
    
    def create_user_manual_tab(self):
        """Create User Manual tab with complete system guide"""
        tab = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # Title
        title = QtWidgets.QLabel("User Manual")
        title.setStyleSheet("color: white; font-size: 18px; font-weight: bold; margin-bottom: 10px; border: none;")
        layout.addWidget(title)
        
        # Description
        desc = QtWidgets.QLabel("Complete user manual for the Sales and Inventory Management System. Follow this guide for step-by-step instructions on using all system features.")
        desc.setStyleSheet("color: #cccccc; font-size: 14px; margin-bottom: 15px; border: none;")
        desc.setWordWrap(True)
        layout.addWidget(desc)
        
        # Create scroll area for the manual content
        scroll_area = QtWidgets.QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: #232323;
            }
            QScrollArea > QWidget > QWidget {
                background-color: #232323;
            }
            QScrollBar:vertical {
                background: #2a2a2a;
                width: 8px;
                border-radius: 4px;
            }
            QScrollBar::handle:vertical {
                background: #555555;
                border-radius: 4px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: #666666;
            }
        """)
        
        # Content widget for scroll area
        content_widget = QtWidgets.QWidget()
        content_layout = QtWidgets.QVBoxLayout(content_widget)
        content_layout.setSpacing(20)
        
        # Getting Started Section
        getting_started_frame = self.create_feature_section("üöÄ Getting Started", [
            "1. Login to the System",
            "   ‚Ä¢ Enter your username and password on the login screen",
            "   ‚Ä¢ Contact your administrator if you don't have credentials",
            "   ‚Ä¢ Click 'Login' to access the main system",
            "",
            "2. Understanding User Roles",
            "   ‚Ä¢ Admin: Full system access including user management and backups",
            "   ‚Ä¢ Staff: Access to daily operations (POS, inventory, customers)",
            "",
            "3. Navigation",
            "   ‚Ä¢ Use the sidebar menu to navigate between different sections",
            "   ‚Ä¢ Dashboard provides an overview of system status",
            "   ‚Ä¢ Click your username in the top-right to logout"
        ])
        content_layout.addWidget(getting_started_frame)
        
        # Daily Operations Section
        daily_ops_frame = self.create_feature_section("üìã Daily Operations", [
            "1. Processing a Sale (Invoice/POS)",
            "   ‚Ä¢ Navigate to Invoice/POS from the sidebar",
            "   ‚Ä¢ Step 1: Select services (up to 3 services per transaction)",
            "   ‚Ä¢ Step 2: Enter customer information (name, gender, phone, city)",
            "   ‚Ä¢ Step 3: Review transaction details and add notes if needed",
            "   ‚Ä¢ Step 4: Process payment (cash only) and apply discounts",
            "   ‚Ä¢ Step 5: Complete transaction and print/save receipt",
            "",
            "2. Managing Inventory",
            "   ‚Ä¢ Go to Inventory ‚Üí Products to manage physical items",
            "   ‚Ä¢ Go to Inventory ‚Üí Services to manage beauty services",
            "   ‚Ä¢ Use the search bar to find specific items quickly",
            "   ‚Ä¢ Right-click items for edit/delete options",
            "",
            "3. Customer Management",
            "   ‚Ä¢ Access Customers page to view transaction history",
            "   ‚Ä¢ Use filters to search by date, name, or phone number",
            "   ‚Ä¢ Right-click transactions to view details or print receipts"
        ])
        content_layout.addWidget(daily_ops_frame)
        
        # Advanced Features Section
        advanced_frame = self.create_feature_section("‚öôÔ∏è Advanced Features", [
            "1. Reports and Analytics",
            "   ‚Ä¢ Navigate to Reports for business analytics",
            "   ‚Ä¢ Overview Report: General business performance",
            "   ‚Ä¢ Financial Report: Revenue and profit analysis",
            "   ‚Ä¢ Sales Report: Detailed transaction data",
            "   ‚Ä¢ Use date filters to analyze specific time periods",
            "",
            "2. Supplier Management",
            "   ‚Ä¢ Access Suppliers page to manage vendor information",
            "   ‚Ä¢ Add new suppliers with complete contact details",
            "   ‚Ä¢ Update supplier information as needed",
            "   ‚Ä¢ Use search and filter functions for quick access",
            "",
            "3. System Maintenance (Admin Only)",
            "   ‚Ä¢ Database Backup: Create full system backups",
            "   ‚Ä¢ User Management: Add, edit, or remove user accounts",
            "   ‚Ä¢ View system statistics and user activity"
        ])
        content_layout.addWidget(advanced_frame)
        
        # Troubleshooting Section
        troubleshooting_frame = self.create_feature_section("üîß Troubleshooting", [
            "Common Issues and Solutions:",
            "",
            "1. Cannot login to the system",
            "   ‚Ä¢ Verify username and password are correct",
            "   ‚Ä¢ Check with administrator for account status",
            "   ‚Ä¢ Ensure database connection is working",
            "",
            "2. Transaction not completing",
            "   ‚Ä¢ Ensure all required fields are filled",
            "   ‚Ä¢ Check that services are available",
            "   ‚Ä¢ Verify customer information is complete",
            "",
            "3. Inventory items not showing",
            "   ‚Ä¢ Check if items are marked as available",
            "   ‚Ä¢ Clear search filters and try again",
            "   ‚Ä¢ Refresh the page or restart the application",
            "",
            "4. Reports not generating",
            "   ‚Ä¢ Verify date range selection",
            "   ‚Ä¢ Check that there is data for the selected period",
            "   ‚Ä¢ Try different filter combinations",
            "",
            "5. System running slowly",
            "   ‚Ä¢ Close unnecessary applications",
            "   ‚Ä¢ Contact administrator for database maintenance",
            "   ‚Ä¢ Restart the application if performance issues persist"
        ])
        content_layout.addWidget(troubleshooting_frame)
        
        # Best Practices Section
        best_practices_frame = self.create_feature_section("‚úÖ Best Practices", [
            "1. Data Entry Guidelines",
            "   ‚Ä¢ Always enter complete customer information",
            "   ‚Ä¢ Use consistent naming conventions for products/services",
            "   ‚Ä¢ Add descriptive notes to transactions when necessary",
            "   ‚Ä¢ Double-check amounts before processing payments",
            "",
            "2. Security Recommendations",
            "   ‚Ä¢ Always logout when leaving your workstation",
            "   ‚Ä¢ Don't share login credentials with others",
            "   ‚Ä¢ Change your password regularly",
            "   ‚Ä¢ Report any suspicious activity to administrators",
            "",
            "3. Maintenance Tasks",
            "   ‚Ä¢ Regular database backups (Admin)",
            "   ‚Ä¢ Monitor inventory levels daily",
            "   ‚Ä¢ Review transaction reports weekly",
            "   ‚Ä¢ Update supplier information as needed",
            "",
            "4. Performance Tips",
            "   ‚Ä¢ Use search and filter functions for large datasets",
            "   ‚Ä¢ Close the application properly when finished",
            "   ‚Ä¢ Keep the system updated with latest versions",
            "   ‚Ä¢ Report bugs or issues to system administrators"
        ])
        content_layout.addWidget(best_practices_frame)
        
        # FAQ Section
        faq_frame = self.create_feature_section("‚ùì Frequently Asked Questions", [
            "Q: How do I reset a customer's transaction?",
            "A: Transactions cannot be modified after completion. Contact an administrator if changes are needed.",
            "",
            "Q: Can I process multiple payment methods?",
            "A: Currently, the system only accepts cash payments.",
            "",
            "Q: How do I add a new service?",
            "A: Go to Inventory ‚Üí Services and click '+ Add Service' button.",
            "",
            "Q: What happens if I lose internet connection?",
            "A: The system works locally, so internet is not required for daily operations.",
            "",
            "Q: How do I view previous receipts?",
            "A: Go to Customers page, find the transaction, and right-click to view receipt.",
            "",
            "Q: Can I modify inventory quantities?",
            "A: Yes, go to Inventory ‚Üí Products and edit the item to update quantities.",
            "",
            "Q: How do I export reports?",
            "A: In the Reports section, use the export buttons to save as Excel or PDF.",
            "",
            "Q: What should I do if the system crashes?",
            "A: Restart the application. Contact administrator if problem persists."
        ])
        content_layout.addWidget(faq_frame)
        
        # Contact Information Section
        contact_frame = self.create_feature_section("üìû Support Contact", [
            "For technical support and assistance:",
            "",
            "System Administrator:",
            "‚Ä¢ Email: admin@mierebeauty.com",
            "‚Ä¢ Phone: +1 (555) 123-4567",
            "‚Ä¢ Business Hours: Monday - Friday, 9:00 AM - 5:00 PM",
            "",
            "Emergency Support:",
            "‚Ä¢ After-hours support available for critical issues",
            "‚Ä¢ Contact your local IT support team",
            "",
            "Training and User Support:",
            "‚Ä¢ Schedule training sessions with your administrator",
            "‚Ä¢ Access this help documentation anytime",
            "‚Ä¢ Report bugs or feature requests to the development team"
        ])
        content_layout.addWidget(contact_frame)
        
        scroll_area.setWidget(content_widget)
        layout.addWidget(scroll_area)
        
        self.tabs.addTab(tab, "User Manual")
    
    def create_dashboard_tab(self):
        """Create Dashboard help tab"""
        tab = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # Title
        title = QtWidgets.QLabel("Dashboard Overview")
        title.setStyleSheet("color: white; font-size: 18px; font-weight: bold; margin-bottom: 10px; border: none;")
        layout.addWidget(title)
        
        # Description
        desc = QtWidgets.QLabel("The Dashboard provides a real-time overview of your business performance with key metrics and analytics.")
        desc.setStyleSheet("color: #cccccc; font-size: 14px; margin-bottom: 15px; border: none;")
        desc.setWordWrap(True)
        layout.addWidget(desc)
        
        # Features section
        features_frame = self.create_feature_section("Key Features:", [
            "üìä Sales Analytics - Track daily revenue and transaction volume over the last 7 days",
            "üì¶ Inventory Status - Monitor stock levels across product categories with color-coded status",
            "üí∞ Revenue Metrics - View total revenue and today's earnings at a glance",
            "üîÑ Transaction Counter - Track today's transaction count",
            "üõ†Ô∏è Services Overview - Monitor total available services",
            "üéØ Quick Navigation - Click 'View All' buttons to jump to detailed pages"
        ])
        layout.addWidget(features_frame)
        
        # How to use section
        usage_frame = self.create_feature_section("How to Use:", [
            "1. View real-time metrics in the colored cards at the top",
            "2. Analyze sales trends in the Sales Analytics chart",
            "3. Monitor inventory status with the color-coded stock levels",
            "4. Click 'View All ‚Üí' buttons to navigate to detailed pages",
            "5. Dashboard auto-refreshes after completing transactions"
        ])
        layout.addWidget(usage_frame)
        
        layout.addStretch()
        self.tabs.addTab(tab, "Dashboard")
    
    def create_invoice_tab(self):
        """Create Invoice/POS help tab"""
        tab = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        title = QtWidgets.QLabel("Invoice & Point of Sale")
        title.setStyleSheet("color: white; font-size: 18px; font-weight: bold; margin-bottom: 10px; border: none;")
        layout.addWidget(title)
        
        desc = QtWidgets.QLabel("Complete transaction processing system for creating invoices, managing customers, and processing payments.")
        desc.setStyleSheet("color: #cccccc; font-size: 14px; margin-bottom: 15px; border: none;")
        desc.setWordWrap(True)
        layout.addWidget(desc)
        
        features_frame = self.create_feature_section("Features:", [
            "üõçÔ∏è Service Selection - Choose up to 3 services with filtering options",
            "üë• Customer Management - Add new customers or select existing ones",
            "üí≥ Payment Processing - Only Accept Cash",
            "üé´ Coupon System - Apply discount coupons and percentage discounts",
            "üìÑ Invoice Generation - Create detailed invoices with customer information",
            "üñ®Ô∏è Receipt Printing - Print or save receipts as PDF",
            "üìù Service Notes - Add special notes or instructions for services"
        ])
        layout.addWidget(features_frame)
        
        workflow_frame = self.create_feature_section("Transaction Workflow:", [
            "1. Select Service ‚Üí Choose your services and review selection",
            "2. Customer Info ‚Üí Enter or select customer details",
            "3. Overview ‚Üí Review transaction details and add notes",
            "4. Payment ‚Üí Process payment and apply discounts",
            "5. Complete ‚Üí Generate receipt and finalize transaction"
        ])
        layout.addWidget(workflow_frame)
        
        layout.addStretch()
        self.tabs.addTab(tab, "Invoice/POS")
    
    def create_inventory_tab(self):
        """Create Inventory help tab"""
        tab = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        title = QtWidgets.QLabel("Inventory Management")
        title.setStyleSheet("color: white; font-size: 18px; font-weight: bold; margin-bottom: 10px; border: none;")
        layout.addWidget(title)
        
        desc = QtWidgets.QLabel("Comprehensive inventory system for managing products, services, and tracking stock levels.")
        desc.setStyleSheet("color: #cccccc; font-size: 14px; margin-bottom: 15px; border: none;")
        desc.setWordWrap(True)
        layout.addWidget(desc)
        
        features_frame = self.create_feature_section("Inventory Tabs:", [
            "üìã Overview - Dashboard view of inventory statistics and alerts",
            "üì¶ Products - Manage physical products, quantities, and suppliers",
            "üõ†Ô∏è Services - Manage beauty services, pricing, and availability",
            "üìä Inventory Status - Monitor stock levels and reorder points"
        ])
        layout.addWidget(features_frame)
        
        actions_frame = self.create_feature_section("Available Actions:", [
            "‚ûï Add new products and services",
            "‚úèÔ∏è Edit existing items and update information",
            "üóëÔ∏è Delete outdated or discontinued items",
            "üîç Search and filter by category, price, or availability",
            "üìà Track quantity changes and stock movements",
            "‚ö†Ô∏è Set low stock alerts and threshold values"
        ])
        layout.addWidget(actions_frame)
        
        layout.addStretch()
        self.tabs.addTab(tab, "Inventory")
    
    def create_customer_tab(self):
        """Create Customer help tab"""
        tab = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        title = QtWidgets.QLabel("Customer Management")
        title.setStyleSheet("color: white; font-size: 18px; font-weight: bold; margin-bottom: 10px; border: none;")
        layout.addWidget(title)
        
        desc = QtWidgets.QLabel("View and manage customer transaction history with detailed filtering and receipt management.")
        desc.setStyleSheet("color: #cccccc; font-size: 14px; margin-bottom: 15px; border: none;")
        desc.setWordWrap(True)
        layout.addWidget(desc)
        
        features_frame = self.create_feature_section("Customer Features:", [
            "üìä Transaction History - Complete record of all customer transactions",
            "üîç Advanced Search - Search by name, phone, service, or transaction ID",
            "üóìÔ∏è Date Filtering - Filter by date ranges (Today, Week, Month, Year)",
            "üë§ Gender Filtering - Filter transactions by customer gender",
            "üìÑ Receipt Management - View, print, or save transaction receipts"
        ])
        layout.addWidget(features_frame)
        
        actions_frame = self.create_feature_section("Available Actions:", [
            "üëÄ View Transaction Details - Right-click any transaction",
            "üñ®Ô∏è Print Receipts - Generate physical receipt copies",
            "üíæ Save as PDF - Export receipts for digital storage",
            "üîç Quick Search - Use the search bar for instant filtering",
            "üìä Sort Data - Click column headers to sort information"
        ])
        layout.addWidget(actions_frame)
        
        layout.addStretch()
        self.tabs.addTab(tab, "Customers")
    
    def create_suppliers_tab(self):
        """Create Suppliers help tab"""
        tab = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        title = QtWidgets.QLabel("Supplier Management")
        title.setStyleSheet("color: white; font-size: 18px; font-weight: bold; margin-bottom: 10px; border: none;")
        layout.addWidget(title)
        
        desc = QtWidgets.QLabel("Manage supplier relationships, contact information, and product sourcing.")
        desc.setStyleSheet("color: #cccccc; font-size: 14px; margin-bottom: 15px; border: none;")
        desc.setWordWrap(True)
        layout.addWidget(desc)
        
        features_frame = self.create_feature_section("Supplier Features:", [
            "üè¢ Supplier Database - Complete supplier contact information",
            "üì± Contact Management - Phone numbers, emails, and addresses",
            "üîç Search & Filter - Find suppliers by name, category, or location",
            "üìä Supplier Statistics - Track number of suppliers and categories",
            "‚úèÔ∏è Edit Information - Update supplier details as needed",
            "üóëÔ∏è Remove Suppliers - Delete inactive or outdated suppliers"
        ])
        layout.addWidget(features_frame)
        
        management_frame = self.create_feature_section("Supplier Management:", [
            "1. Add New Suppliers - Click '+ Add Supplier' button",
            "2. Enter Complete Information - Name, contact details, category",
            "3. Search Existing Suppliers - Use search bar for quick access",
            "4. Update Information - Right-click to edit supplier details",
            "5. Filter by Category - Use filter button for specific categories",
            "6. Remove Inactive Suppliers - Right-click to delete"
        ])
        layout.addWidget(management_frame)
        
        layout.addStretch()
        self.tabs.addTab(tab, "Suppliers")
    
    def create_reports_tab(self):
        """Create Reports help tab"""
        tab = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        title = QtWidgets.QLabel("Reports & Analytics")
        title.setStyleSheet("color: white; font-size: 18px; font-weight: bold; margin-bottom: 10px; border: none;")
        layout.addWidget(title)
        
        desc = QtWidgets.QLabel("Comprehensive reporting system for business analytics, financial tracking, and performance monitoring.")
        desc.setStyleSheet("color: #cccccc; font-size: 14px; margin-bottom: 15px; border: none;")
        desc.setWordWrap(True)
        layout.addWidget(desc)
        
        reports_frame = self.create_feature_section("Available Reports:", [
            "üìä Overview Report - General business performance summary",
            "üìà Financial Report - Revenue, profit, and financial analytics",
            "üõçÔ∏è Sales Report - Detailed sales data and transaction analysis",
            "üì¶ Inventory Report - Stock levels, product performance, and alerts",
            "üë• Customer Report - Customer analytics and transaction patterns"
        ])
        layout.addWidget(reports_frame)
        
        features_frame = self.create_feature_section("Report Features:", [
            "üóìÔ∏è Date Range Selection - Custom date filtering for all reports",
            "üìä Visual Charts - Graphs and charts for easy data interpretation",
            "üìÑ Export Options - Export reports to Excel or PDF formats",
            "üîç Advanced Filtering - Filter by categories, payment methods, etc.",
            "üìà Trend Analysis - Identify business trends and patterns",
            "üéØ Key Metrics - Focus on important business indicators"
        ])
        layout.addWidget(features_frame)
        
        layout.addStretch()
        self.tabs.addTab(tab, "Reports")
    
    def create_maintenance_tab(self):
        """Create Maintenance help tab"""
        tab = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(tab)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        title = QtWidgets.QLabel("System Maintenance")
        title.setStyleSheet("color: white; font-size: 18px; font-weight: bold; margin-bottom: 10px; border: none;")
        layout.addWidget(title)
        
        desc = QtWidgets.QLabel("System administration tools for database management, user control, and system maintenance.")
        desc.setStyleSheet("color: #cccccc; font-size: 14px; margin-bottom: 15px; border: none;")
        desc.setWordWrap(True)
        layout.addWidget(desc)
        
        database_frame = self.create_feature_section("Database Backup:", [
            "üíæ Full Database Backup - Create complete system backups",
            "üìä Table Information - View database table sizes and row counts",
            "üìÅ Backup Location - Choose custom backup save locations",
            "üîÑ Restore Options - Restore from previous backup files",
            "‚ö° Quick Backup - One-click backup creation"
        ])
        layout.addWidget(database_frame)
        
        user_frame = self.create_feature_section("User Management:", [
            "üë• User Accounts - Manage staff and admin accounts",
            "üîê Role Assignment - Set user permissions (Admin/Staff)",
            "‚úèÔ∏è Edit Users - Update user information and passwords",
            "üìä User Statistics - View user distribution and activity",
            "üóëÔ∏è Remove Users - Delete inactive user accounts"
        ])
        layout.addWidget(user_frame)
        
        layout.addStretch()
        self.tabs.addTab(tab, "Maintenance")
    
    def create_feature_section(self, title, features):
        """Create a feature section with title and bullet points"""
        frame = QtWidgets.QFrame()
        frame.setStyleSheet("""
            QFrame {
                background-color: #2a2a2a;
                border-radius: 8px;
                border: none;
            }
        """)
        layout = QtWidgets.QVBoxLayout(frame)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(8)
        
        # Section title
        section_title = QtWidgets.QLabel(title)
        section_title.setStyleSheet("color: white; font-size: 14px; font-weight: bold; margin-bottom: 5px; border: none;")
        layout.addWidget(section_title)
        
        # Feature list
        for feature in features:
            feature_label = QtWidgets.QLabel(feature)
            feature_label.setStyleSheet("color: #cccccc; font-size: 13px; margin-left: 10px; border: none;")
            feature_label.setWordWrap(True)
            layout.addWidget(feature_label)
        
        return frame
    
    def create_faq_item(self, question, answer):
        """Create a collapsible FAQ item"""
        faq_item = QtWidgets.QFrame()
        faq_item.setStyleSheet("""
            QFrame {
                background-color: #323232;
                border-radius: 5px;
                border: none;
            }
        """)
        
        layout = QtWidgets.QVBoxLayout(faq_item)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(8)
        
        # Question header with toggle
        question_layout = QtWidgets.QHBoxLayout()
        
        question_label = QtWidgets.QLabel(f"Q: {question}")
        question_label.setStyleSheet("color: white; font-size: 13px; font-weight: bold; border: none;")
        question_label.setWordWrap(True)
        
        toggle_btn = QtWidgets.QPushButton("‚ñº")
        toggle_btn.setFixedSize(20, 20)
        toggle_btn.setStyleSheet("""
            QPushButton {
                background-color: #007ACC;
                color: white;
                border: none;
                border-radius: 10px;
                font-size: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #0099FF;
            }
        """)
        
        question_layout.addWidget(question_label)
        question_layout.addWidget(toggle_btn)
        
        layout.addLayout(question_layout)
        
        # Answer (initially hidden)
        answer_label = QtWidgets.QLabel(f"A: {answer}")
        answer_label.setStyleSheet("color: #cccccc; font-size: 12px; margin-left: 15px; border: none;")
        answer_label.setWordWrap(True)
        answer_label.setVisible(False)
        
        layout.addWidget(answer_label)
        
        # Connect toggle functionality
        def toggle_answer():
            is_visible = answer_label.isVisible()
            answer_label.setVisible(not is_visible)
            toggle_btn.setText("‚ñ≤" if not is_visible else "‚ñº")
        
        toggle_btn.clicked.connect(toggle_answer)
        
        return faq_item
    
    def toggle_faq(self):
        """Toggle FAQ section visibility"""
        is_visible = self.faq_content.isVisible()
        self.faq_content.setVisible(not is_visible)
        self.faq_toggle_btn.setText("‚ñ≤ Hide FAQ" if not is_visible else "‚ñº Show FAQ")
    
    def search_help_content(self):
        """Search through help content"""
        search_text = self.search_input.text().lower()
        
        if not search_text:
            # Show all content when search is empty
            for i in range(self.tabs.count()):
                tab_widget = self.tabs.widget(i)
                self.show_all_content(tab_widget)
            return
        
        # Search through tab content
        for i in range(self.tabs.count()):
            tab_widget = self.tabs.widget(i)
            self.filter_tab_content(tab_widget, search_text)
    
    def show_all_content(self, widget):
        """Show all content in a widget"""
        if isinstance(widget, QtWidgets.QLabel):
            widget.setVisible(True)
        elif isinstance(widget, QtWidgets.QFrame):
            widget.setVisible(True)
        
        # Recursively show all child widgets
        for child in widget.findChildren(QtWidgets.QWidget):
            if isinstance(child, (QtWidgets.QLabel, QtWidgets.QFrame)):
                child.setVisible(True)
    
    def filter_tab_content(self, widget, search_text):
        """Filter tab content based on search text"""
        if isinstance(widget, QtWidgets.QLabel):
            text = widget.text().lower()
            widget.setVisible(search_text in text)
        elif isinstance(widget, QtWidgets.QFrame):
            # Check if any child label contains the search text
            has_match = False
            for child in widget.findChildren(QtWidgets.QLabel):
                if search_text in child.text().lower():
                    has_match = True
                    break
            widget.setVisible(has_match)
        
        # Recursively filter child widgets
        for child in widget.findChildren(QtWidgets.QWidget):
            if isinstance(child, (QtWidgets.QLabel, QtWidgets.QFrame)):
                self.filter_tab_content(child, search_text)