# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from app.ui.pages import (
    DashboardPage,
    InventoryPage,
    ReportsPage,
    CustomersPage,
    SuppliersPage,
    SalesPage,
    MaintenancePage,
    HelpPage,
    AboutPage
)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        # Set up the main window properties
        MainWindow.setObjectName("MainWindow")
        
        # Create the central widget
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        MainWindow.setCentralWidget(self.centralwidget)
        
        # Set up the main layout
        self.main_layout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.main_layout.setContentsMargins(0, 0, 0, 0)
        self.main_layout.setSpacing(0)
        
        # Create the sidebar
        self.create_sidebar()
        
        # Create the stacked widget for pages
        self.stackedWidgetMain = QtWidgets.QStackedWidget()
        self.main_layout.addWidget(self.stackedWidgetMain)
        
        # Add all pages to the stacked widget
        self.add_pages()
        
        # Connect sidebar buttons to page switching
        self.connect_buttons()
        
        # Set initial page
        self.stackedWidgetMain.setCurrentIndex(0)

        MainWindow.setWindowTitle("Inventory Management System")
        
        # Set window to full screen and disable minimize/maximize buttons
        MainWindow.setWindowFlags(
            QtCore.Qt.Window |
            QtCore.Qt.CustomizeWindowHint |
            QtCore.Qt.WindowTitleHint |
            QtCore.Qt.WindowCloseButtonHint
        )
        
        # Set window to maximized size
        MainWindow.showMaximized()
        
        # Make the window unresizable
        MainWindow.setFixedSize(MainWindow.size())
        
    def create_sidebar(self):
        self.sidebar = QtWidgets.QWidget()
        self.sidebar.setFixedWidth(240) 
        self.sidebar.setStyleSheet("background-color: #232323;")
        
        # Create main layout for sidebar
        self.sidebar_layout = QtWidgets.QVBoxLayout(self.sidebar)
        self.sidebar_layout.setContentsMargins(20, 20, 20, 20)
        self.sidebar_layout.setSpacing(0)
        
        # Logo
        self.logo_label = QtWidgets.QLabel()
        self.logo_label.setPixmap(QtGui.QPixmap("app/resources/images/Miere1.png"))
        self.logo_label.setFixedHeight(100)
        self.sidebar_layout.addWidget(self.logo_label)
        
        # Add some spacing after the logo
        self.sidebar_layout.addSpacing(10)
        
        # Navigation buttons container
        self.nav_container = QtWidgets.QWidget()
        
        # Navigation layout
        self.nav_layout = QtWidgets.QVBoxLayout(self.nav_container)
        self.nav_layout.setContentsMargins(0, 0, 0, 0)
        self.nav_layout.setSpacing(5)
        
        # Create navigation buttons
        self.create_nav_button("Dashboard", "app/resources/images/Home.png")
        self.create_nav_button("Inventory", "app/resources/images/Inventory.png")
        self.create_nav_button("Reports", "app/resources/images/Group 11.png")
        self.create_nav_button("Customers", "app/resources/images/Suppliers.png")
        self.create_nav_button("Suppliers", "app/resources/images/Suppliers.png")
        self.create_nav_button("Sales", "app/resources/images/Order.png")
        self.create_nav_button("Maintenance", "app/resources/images/Group 15.png")
        
        # Add navigation container to sidebar layout
        self.sidebar_layout.addWidget(self.nav_container)
        
        # Add expanding spacer to push bottom buttons to bottom
        self.sidebar_layout.addStretch(1)
        
        # Bottom buttons container
        self.bottom_container = QtWidgets.QWidget()

        # Bottom buttons layout
        self.bottom_layout = QtWidgets.QVBoxLayout(self.bottom_container)
        self.bottom_layout.setContentsMargins(0, 0, 0, 0)
        self.bottom_layout.setSpacing(5)

        # Create bottom buttons
        self.create_bottom_button("Help", "app/resources/images/Settings.png")
        self.create_bottom_button("About", "app/resources/images/Suppliers.png")
        self.create_bottom_button("Logout", "app/resources/images/Vector.png")
        
        # Add bottom container to sidebar layout
        self.sidebar_layout.addWidget(self.bottom_container)
        
        # Add sidebar to main layout
        self.main_layout.addWidget(self.sidebar)
        
    def create_nav_button(self, text, icon_path):
        button = QtWidgets.QPushButton(f" {text}")
        button.setMinimumHeight(50)
        button.setFont(QtGui.QFont("Segoe UI", 10))
        button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        
        button.setStyleSheet("""
            QPushButton {
                color: white;
                text-align: left;
                padding-left: 10px;
                border: none;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #2d2d2d;
            }
        """)
        
        # Set icon with consistent size
        icon = QtGui.QIcon(icon_path)
        button.setIcon(icon)
        button.setIconSize(QtCore.QSize(20, 20))
        
        # Add to layout
        self.nav_layout.addWidget(button)
        
        # Store reference to button
        setattr(self, f"pushButton{text}", button)
        
    def create_bottom_button(self, text, icon_path):
        button = QtWidgets.QPushButton(f" {text}")
        button.setMinimumHeight(50)
        button.setFont(QtGui.QFont("Segoe UI", 10))
        button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        
        button.setStyleSheet("""
            QPushButton {
                color: white;
                text-align: left;
                padding-left: 10px;
                border: none;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #2d2d2d;
            }
        """)
        
        # Set icon with consistent size
        icon = QtGui.QIcon(icon_path)
        button.setIcon(icon)
        button.setIconSize(QtCore.QSize(18, 18))
        
        # Add to layout
        self.bottom_layout.addWidget(button)
        
        # Store reference to button
        setattr(self, f"pushButton{text}", button)
        
    def add_pages(self):
        # Dashboard page
        dashboard_page = DashboardPage()
        self.stackedWidgetMain.addWidget(dashboard_page)
        
        # Inventory page
        inventory_page = InventoryPage()
        self.stackedWidgetMain.addWidget(inventory_page)
        
        # Reports page
        reports_page = ReportsPage()
        self.stackedWidgetMain.addWidget(reports_page)
        
        # Customers page
        customers_page = CustomersPage()
        self.stackedWidgetMain.addWidget(customers_page)
        
        # Suppliers page
        suppliers_page = SuppliersPage()
        self.stackedWidgetMain.addWidget(suppliers_page)
        
        # Sales page
        sales_page = SalesPage()
        self.stackedWidgetMain.addWidget(sales_page)
        
        # Maintenance page
        maintenance_page = MaintenancePage()
        self.stackedWidgetMain.addWidget(maintenance_page)
        
        # Help page
        help_page = HelpPage()
        self.stackedWidgetMain.addWidget(help_page)
        
        # About page
        about_page = AboutPage()
        self.stackedWidgetMain.addWidget(about_page)
        
        # Apply consistent styling to all pages
        self.apply_page_styling()

    def apply_page_styling(self):
        # Apply consistent header styling to all pages in the stacked widget
        header_style = "background-color: rgba(35, 35, 35, 0.95);"
        
        # Loop through all pages in the stacked widget
        for i in range(self.stackedWidgetMain.count()):
            page = self.stackedWidgetMain.widget(i)
            
            # Find header widget in each page
            for child in page.children():
                if isinstance(child, QtWidgets.QWidget) and hasattr(child, 'objectName'):
                    if 'header' in child.objectName().lower() or hasattr(child, 'isHeader'):
                        # Apply consistent style
                        child.setStyleSheet(header_style)
                        
                        # Find title and date labels within the header
                        for header_child in child.children():
                            if isinstance(header_child, QtWidgets.QLabel):
                                if 'title' in header_child.objectName().lower():
                                    header_child.setStyleSheet("color: white; font-size: 24px;")
                                elif 'date' in header_child.objectName().lower():
                                    header_child.setStyleSheet("color: #E2F163; font-size: 14px;")

    def connect_buttons(self):
        # Connect main navigation buttons to page switching
        self.pushButtonDashboard.clicked.connect(lambda: self.stackedWidgetMain.setCurrentIndex(0))
        self.pushButtonInventory.clicked.connect(lambda: self.stackedWidgetMain.setCurrentIndex(1))
        self.pushButtonReports.clicked.connect(lambda: self.stackedWidgetMain.setCurrentIndex(2))
        self.pushButtonCustomers.clicked.connect(lambda: self.stackedWidgetMain.setCurrentIndex(3))
        self.pushButtonSuppliers.clicked.connect(lambda: self.stackedWidgetMain.setCurrentIndex(4))
        self.pushButtonSales.clicked.connect(lambda: self.stackedWidgetMain.setCurrentIndex(5))
        self.pushButtonMaintenance.clicked.connect(lambda: self.stackedWidgetMain.setCurrentIndex(6))
        self.pushButtonHelp.clicked.connect(lambda: self.stackedWidgetMain.setCurrentIndex(7))
        self.pushButtonAbout.clicked.connect(lambda: self.stackedWidgetMain.setCurrentIndex(8))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
